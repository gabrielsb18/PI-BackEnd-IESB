openapi: 3.0.0
info:
    title: API Notes
    version: 1.0
tags:
    - notas
paths:
  /notes:
    post:
      summary: Cria uma nova nota
      tags:
        - Notas
      requestBody:
        description: Dados da nova Nota
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notas'
      responses:
        '201':
          description: Nota criada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notas'
        '422':
          description: Requisição com dados invalidos
          content:
            application/json:
              examples:
                invalidData:
                  summary: Dados invalidos
                  value:
                    msg: "Dados inválidos!"
        '401':
          $ref: '#/components/schemas/InvalidToken'
    get:
      summary: Lista todas as notas do usuario
      tags:
        - Notas
      responses:
        '200':
          description: Lista todas as Notas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Array de Notas'
        '401':
          $ref: '#/components/schemas/InvalidToken'
        
  /notes/{id}:
    get:
      summary: Pega uma nota pelo id
      tags:
        - Notas
      parameters: 
        - in: path
          name: id
          type: string
      responses: 
        "200":
          description: Nota encontrada 
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/Notas'
        "404": 
          description: Nota não encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '401':
          $ref: '#/components/schemas/InvalidToken'
    put:
      summary: Atualiza uma nota pelo id
      tags:
      - Notas
      parameters:
        - in: path
          type: string
          name: id
      requestBody: 
        description: Dados da atualizados Nota especifica
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/Notas'
      responses:
        "200":
          description: Nota atualizada com sucesso
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Notas'
        "404":
          description: Nota não encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        "422":
          description: Requisição com dados invalidos
          content:
            application/json:
              examples:
                invalidData:
                  summary: Dados invalidos
                  value:
                    msg: "Dados inválidos!"
        '401':
          $ref: '#/components/schemas/InvalidToken'
    delete:
      summary: Deleta uma nota pelo id
      tags:
        - Notas
      parameters: 
        - in: path
          type: string
          name: id
      responses:
        "204":
          description: Nota deletada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notas'
        "404":
          description: Nota não encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '401':
          $ref: '#/components/schemas/InvalidToken'
  /notes/search:
    get:
      summary: Busca as notas pelo titulo ou descrição
      tags:
        - Notas
      parameters:
        - in: query
          name: search
          type: string
          required: true
      responses:
        '200':
          description: Lista de notas encontradas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Array de Notas'
        "400":
          description: Nenhum termo informado para pesquisa
          content:
            application/json:
              examples:
                invalidData:
                  summary: Dados invalidos
                  value:
                    msg: "Informe um termo para pesquisa"  
        '401':
          $ref: '#/components/schemas/InvalidToken'
  /notes/totals:
    get:
      summary: Retorna a quantidade total de notas pendentes e concluidas
      tags:
        - Notas
      responses:
        '200':
          description: Quantidade total de notas pendentes e concluidas
          content:
            application/json:
              schema:
                type: object
                properties:
                  pendente:
                    type: integer
                    example: 10
                  concluida:
                    type: integer
                    example: 5
        '401':
          $ref: '#/components/schemas/InvalidToken'
  /users:
    post:
      summary: Cria um novo usuário
      tags:
        - Usuarios
      requestBody:
        description: Dados do novo usuário
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuarios'
      responses:
        '201':
          description: Usuário criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuarios'
        '400':
          description: Requisição com dados invalidos
          content:
            application/json:
              examples:
                emailInUse:
                  summary: Email em uso
                  value:
                    errors: "Email já cadastrado"
                emailInvalid:
                  summary: Email inválido
                  value:
                    errors: "Email inválido"
                emailRequired:
                  summary: Email é obrigatório
                  value:
                    errors: "Obrigatorio o preenchimento do email"
                emailBlanckSpace:
                  summary: Email com espaço em branco
                  value:
                    errors: "Email não pode conter espaços em branco"
                passwordRequired:
                  summary: Senha é obrigatória
                  value:
                    errors: "A senha deve ter no minimo 8 caracteres"
                passwordBlanckSpace:
                  summary: Senha com espaço em branco
                  value:
                    errors: "Senha não pode conter espaços em branco"
                passwordInvalid:
                  summary: Senha inválida
                  value:
                    errors: "Senha inválida"
        '500':
          description: Erro interno no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'

  /users/login:
    post:
      summary: Faz login na aplicação
      tags:
        - Usuarios
      requestBody:
        description: Dados do usuário
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuarios'
      responses:
        '200':
          description: Usuário logado com sucesso
          content:
            application/json:
              examples:
                login:
                  summary: Login efetuado
                  value: 
                    msg: "Login realizado com sucesso"
                    token: "token de acesso"
        '400':
          description: Dados inválidos
          content:
            aplication/json:
              examples:
                invalidData:
                  summary: Dados de acesso inválidos
                  value:
                    msg: "Email e senha são obrigatórios"
        '401':
          description: Usuário não encontrado ou senha invalida
          content:
            application/json:
              examples:
                userNotFound:
                  summary: Acesso negado
                  value:
                    msg: "Acesso negado"
        '500':
          description: Erro interno no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
  /users/renovar:
    post:
      summary: Renova o token de acesso
      tags:
        - Usuarios
      requestBody:
        description: Token de atualização
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  example: "token de atualização"
      responses:
          '200':
            description: Token renovado com sucesso
            content:
              application/json:
                examples:
                  token:
                    summary: Token renovado
                    value:
                      acessToken: "novo token de acesso"
          '401':
            description: Token expirado
            content:
              application/json:
                examples:
                  invalidToken:
                    summary: Token expirado
                    value:
                      msg: "Token expirado"
          '400':
            description: Token de atualização não fornecido
            content:
                application/json:
                    examples:
                        missingToken:
                            summary: Token não fornecido
                            value:
                                msg: "Refresh Token não fornecido"
          '403':
            description: token de atualização inválido
            content:
                application/json:
                    examples:
                        invalidToken:
                            summary: Token inválido
                            value:
                                msg: "Token inválido"
  /uses/:
    get:
      summary: Retorna os dados do usuário logado
      tags:
        - Usuarios
      responses:
        '200':
          description: Dados do usuário retornados com sucesso
          content:
            application/json:
              examples:
                user:
                  summary: Dados do usuário retornados com sucesso
                  value:
                    avatar: "avatar do usuário"
                    email: "email do usuário"
                    nome: "nome do usuário"
                    userId: "id do usuário"
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              examples:
                userNotFound:
                  summary: Usuário não encontrado
                  value:
                    msg: "Usuário não encontrado"
        '401':
          description: Token de usuario inválido
          content:
            application/json:
              examples:
                invalidToken:
                  summary: Token inválido
                  value:
                    msg: "Token inválido"
  /users/avatar:
    patch:
      summary: Atualiza o avatar do usuário
      tags:
        - Usuarios
      requestBody:
        description: Avatar do usuário
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        '201':
          description: Foto atualizada com sucesso
          content:
            application/json:
              examples:
                avatar:
                  summary: Avatar atualizado
                  value:
                    avatar: "avatar do usuário"
        '401':
          description: Token de usuario inválido
          content:
              application/json:
                examples:
                  invalidToken:
                    summary: Token inválido
                    value:
                      msg: "Somente usuários autenticados podem mudar o avatar" 
  /users/:
    put:
      summary: Atualiza os dados do usuário
      tags:
        - Usuarios
      requestBody:
        description: Dados do usuário
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nome:
                  type: string
                  example: "Ciclano"
                email:
                  type: string
                  example: "ciclano@gmail.com"
                senha_antiga:
                  type: string
                  example: "Senha123_"
                senha:
                  type: string
                  example: "NovaSenha123_"
      responses:
        '200':
          description: Dados do usuário atualizados com sucesso
          content:
            application/json:
              examples:
                user:
                  summary: Dados do usuário atualizados
                  value:
                    msg: "Usuário atualizado com sucesso"
                    email: "ciclano@gmail.com"
                    nome: "Ciclano"
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              examples:
                userNotFound:
                  summary: Usuário não encontrado
                  value:
                    msg: "Usuário não encontrado"
        '400':
          description: Dados inválidos
          content:
            application/json:
              examples:
                emailInUse:
                  summary: Endereço de email já cadastrado
                  value:
                    msg: "Email já cadastrado"
                passwordInvalid:
                  summary: A senha não foi informada
                  value:
                    msg: "Você precisa informar sua senha antiga"
                passwordIncorrect:
                  summary: A senha inserida está incorreta
                  value:
                    msg: "Senha antiga invalida"
                
         
  

components:
  schemas:
    Array de Notas: 
      type: array
      items: 
        $ref: '#/components/schemas/Notas'
    Notas:
      type: object
      properties:
        titulo:
          type: string
          example: Titulo da Anotação
        descricao:
          type: string
          example: Descrição da tarefa
    Usuarios:
      type: object
      properties:
        email:
          type: string
          example: "email@gmail.com"
        senha:
          type: string
          example: "senha123"
    InternalError:
      type: object
      properties:
        errors:
          type: string
          example: "Erro interno no servidor"
    NotFound:
      type: object
      properties:
        msg:
          type: string
          example: "Nota não encontrada"
    InvalidToken:
      description: Não autorizado
      content:
        application/json:
          examples:
            invalid:
              summary: Token Ausente
              value:
                msg: "ACESSO NEGADO!"
  securitySchemes:
      JWTAuth:
        type: apiKey
        in: header
        name: Authorization
security:
  - JWTAuth: []